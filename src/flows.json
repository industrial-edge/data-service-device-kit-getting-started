[
    {
        "id": "25a0dd308795dbdd",
        "type": "subflow",
        "name": "IIH Essentials Read Variables",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 300,
                "wires": [
                    {
                        "id": "4335d39f72104971"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 380,
                "wires": [
                    {
                        "id": "62f950c16a8d5c40",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "variablesNames",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Variables Names"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#0080FF",
        "inputLabels": [
            "Input dates"
        ],
        "outputLabels": [
            "Data"
        ],
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 840,
            "y": 394,
            "wires": [
                {
                    "id": "20c2a8ddeeadac97",
                    "port": 0
                },
                {
                    "id": "62f950c16a8d5c40",
                    "port": 2
                }
            ]
        }
    },
    {
        "id": "0f843d50807d3396",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Create Token Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceUser\") + \":\" + flow.get(\"dataservicePass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "ccb37cbd2db81366",
                "6ec6aebcb00b40da"
            ]
        ]
    },
    {
        "id": "ccb37cbd2db81366",
        "type": "http request",
        "z": "25a0dd308795dbdd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "21a97a90128be0f5"
            ]
        ]
    },
    {
        "id": "bf4647fd76ed0642",
        "type": "inject",
        "z": "25a0dd308795dbdd",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "f901d5f904363ca3"
            ]
        ]
    },
    {
        "id": "21a97a90128be0f5",
        "type": "change",
        "z": "25a0dd308795dbdd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "accessToken",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 120,
        "wires": [
            [
                "5273ef52d4cde8f6"
            ]
        ]
    },
    {
        "id": "ecc64e3de06ea5c9",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n//const from = new Date('2021-10-10T10:00:00.000Z');\n//const to = new Date('2021-10-10T11:00:00.000Z');\nconst vars = flow.get(\"variablesIds\");\nconst variablesIds = Object.values(vars);\n\nlet route = \"/DataService/Data?variableIds=[\\\"\" + variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\nroute += \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = flow.get(\"dataserviceUrl\") + route;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"accessToken\");\n\nreturn outMsg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "72c46a41c9f83e42"
            ]
        ]
    },
    {
        "id": "72c46a41c9f83e42",
        "type": "http request",
        "z": "25a0dd308795dbdd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "62f950c16a8d5c40"
            ]
        ]
    },
    {
        "id": "e0ba7afbdd12043e",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"accessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 180,
        "wires": [
            [
                "8c5bf480a06d0f3d"
            ]
        ]
    },
    {
        "id": "8c5bf480a06d0f3d",
        "type": "http request",
        "z": "25a0dd308795dbdd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "20c2a8ddeeadac97"
            ]
        ]
    },
    {
        "id": "20c2a8ddeeadac97",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Get Variables Ids",
        "func": "// create out message\nlet outMsg    = {\"payload\": null};\n\n// get names of variables to be extracted from Data Service app\nlet varName = env.get(\"variablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// create object with {key:value} as {name:id} of variables\nlet vars = {};\nfor(i=0; i<varNameArray.length; i++){\n    vars[varNameArray[i]]  = []; \n}\n\n// iterate through readed tags\nfor (let i=0; i < varNameArray.length; i++){\n    \n    // iterate through selected ids\n    for(let j=0; j < msg.payload.variables.length; j++){\n    \n        // search for tagselectedTags[j]\n        if(varNameArray[i] == msg.payload.variables[j].variableName)\n        {\n            vars[varNameArray[i]] = msg.payload.variables[j].variableId;\n            // stop on first match, ids are uniques\n            break;\n        }\n    }\n}\n//node.send(vars);\nif (Object.keys(vars).length > 0) {\n    flow.set(\"variablesIds\", vars);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(vars).length + \" variables.\"\n    };\n} \nelse {\n    flow.set(\"variablesIds\", null);\n}\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5273ef52d4cde8f6",
        "type": "switch",
        "z": "25a0dd308795dbdd",
        "name": "accessToken?",
        "property": "accessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "e0ba7afbdd12043e"
            ]
        ]
    },
    {
        "id": "4335d39f72104971",
        "type": "switch",
        "z": "25a0dd308795dbdd",
        "name": "accessToken?",
        "property": "accessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 260,
        "wires": [
            [
                "4e216c0731d0ce21"
            ]
        ]
    },
    {
        "id": "4e216c0731d0ce21",
        "type": "switch",
        "z": "25a0dd308795dbdd",
        "name": "variablesIds?",
        "property": "variablesIds",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 242,
        "y": 300,
        "wires": [
            [
                "6309f9e8b0d8167a"
            ]
        ]
    },
    {
        "id": "62f950c16a8d5c40",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Recursive Data Extraction",
        "func": "let out1 = {};\nlet out2 = {};\nlet dataBuffer = flow.get(\"dataBuffer\") || {};\nlet variablesIds = flow.get(\"variablesIds\");\n\nif (Object.keys(dataBuffer).length == 0) {\n    flow.set(\"startTime\", new Date().getTime());\n    for(i=0; i<Object.keys(variablesIds).length; i++){\n        dataBuffer[Object.keys(variablesIds)[i]]  = []; \n    }\n}\n\nlet newDataBuffer = dataBuffer;\n\nfor(j=0; j<msg.payload.data.length; j++){\n    index = Object.values(variablesIds).indexOf(msg.payload.data[j].variableId);\n    newDataBuffer[Object.keys(variablesIds)[index]] = dataBuffer[Object.keys(variablesIds)[j]].concat(msg.payload.data[j].values);\n}\n\nflow.set(\"dataBuffer\", newDataBuffer);\n\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    out1.from = new Date(msg.payload.hasMoreData.from);\n    out1.to = new Date(msg.payload.hasMoreData.to);\n    return [out1, null, status];\n} else {\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Query completed on \" + new Date().toISOString()\n    }};\n    out2.topic = env.get(\"variablesName\");\n    out2.payload = newDataBuffer;\n    flow.set(\"dataBuffer\", {});\n    out2.queryTime = new Date().getTime() - flow.get(\"startTime\");\n    return [null, out2, status]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 382,
        "wires": [
            [
                "ecc64e3de06ea5c9"
            ],
            [],
            []
        ]
    },
    {
        "id": "b84c5e8a4b1ec8e5",
        "type": "function",
        "z": "25a0dd308795dbdd",
        "name": "Create User",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/TokenManagerService/users\";\n\n//set body\nmsg.payload = {\n      userName: flow.get(\"dataserviceUser\"),\n      passWord: flow.get(\"dataservicePass\"),\n      familyName: \"myFamily\" + flow.get(\"dataserviceUser\"),\n      givenName: flow.get(\"dataserviceUser\"),\n      email: flow.get(\"dataserviceUser\") + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "0f35da685ef45783"
            ]
        ]
    },
    {
        "id": "0f35da685ef45783",
        "type": "http request",
        "z": "25a0dd308795dbdd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 670,
        "y": 60,
        "wires": [
            [
                "0f843d50807d3396"
            ]
        ]
    },
    {
        "id": "6309f9e8b0d8167a",
        "type": "switch",
        "z": "25a0dd308795dbdd",
        "name": "dateFromPicked?",
        "property": "from",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 247,
        "y": 340,
        "wires": [
            [
                "f5ffaf34b2c10156"
            ]
        ]
    },
    {
        "id": "f5ffaf34b2c10156",
        "type": "switch",
        "z": "25a0dd308795dbdd",
        "name": "dateToPicked?",
        "property": "to",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 249,
        "y": 380,
        "wires": [
            [
                "ecc64e3de06ea5c9"
            ]
        ]
    },
    {
        "id": "f901d5f904363ca3",
        "type": "change",
        "z": "25a0dd308795dbdd",
        "name": "url, user, pass",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceUser",
                "pt": "flow",
                "to": "nodeUser",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataservicePass",
                "pt": "flow",
                "to": "nodePass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 60,
        "wires": [
            [
                "b84c5e8a4b1ec8e5"
            ]
        ]
    },
    {
        "id": "6ec6aebcb00b40da",
        "type": "debug",
        "z": "25a0dd308795dbdd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 540,
        "wires": []
    },
    {
        "id": "61788ebc404c5c85",
        "type": "tab",
        "label": "IIH Essentials",
        "disabled": false,
        "info": ""
    },
    {
        "id": "adef2296de4c5fa5",
        "type": "subflow:25a0dd308795dbdd",
        "z": "61788ebc404c5c85",
        "name": "",
        "env": [
            {
                "name": "variablesNames",
                "value": "Sinus",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "fdae8cc0a4cef7b6",
                "a036140aad45e63a",
                "afa0118b69837475"
            ]
        ]
    },
    {
        "id": "2240333505724171",
        "type": "inject",
        "z": "61788ebc404c5c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "e8170bfee59aac90"
            ]
        ]
    },
    {
        "id": "e8170bfee59aac90",
        "type": "change",
        "z": "61788ebc404c5c85",
        "name": "getDateFromDashboard",
        "rules": [
            {
                "t": "set",
                "p": "from",
                "pt": "msg",
                "to": "from",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "to",
                "pt": "msg",
                "to": "to",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "adef2296de4c5fa5"
            ]
        ]
    },
    {
        "id": "ea84427236826d94",
        "type": "ui_chart",
        "z": "61788ebc404c5c85",
        "name": "",
        "group": "11acd9f9f1689c89",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Production Trend",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-30",
        "ymax": "30",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1c84ce",
            "#ed2c2f",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 360,
        "wires": [
            [
                "49d0071dc6326cf9"
            ]
        ]
    },
    {
        "id": "a036140aad45e63a",
        "type": "function",
        "z": "61788ebc404c5c85",
        "name": "Create chart msg",
        "func": "// create base out message\nlet outMsg = {payload:[{}]};\nlet outSeries = [];\nlet tags = Object.keys(msg.payload);\n\nfor(i=0;i<tags.length;i++){\n    outSeries.push(tags[i]);\n}\n\n// create chart properties\noutMsg.payload[0].series = outSeries;\noutMsg.payload[0].labels = [\"\"];\noutMsg.payload[0].data = [];\n\n// create time series\nfor(i=0;i<tags.length;i++){\n    let data = Object.values(msg.payload)[i];\n    let name = Object.keys(msg.payload)[i];\n    outMsg.payload[0].data[i] = [];\n    for (j=0;j<data.length;j++){\n        let ts = new Date(data[j].timestamp).getTime();\n        outMsg.payload[0].data[i].push({\"x\": ts, \"y\": data[j].value});  \n    }\n}\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 320,
        "wires": [
            [
                "ea84427236826d94"
            ]
        ],
        "info": "The aim of this node is to prepare the data received from \"DataService Read Variable\" node, in order to visualize them into a dedicated dashboard.\n\nThe time series data format will be the following:\n\n[{\n\"series\": [\"VarA\", \"VarB\", \"VarC\"],\n\"data\": [\n    [{ \"x\": \"20/10/2021 20:50:50\", \"y\": 5 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 6 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 7 }\n    ],\n    ...,\n    [{ \"x\": \"20/10/2021 20:51:50\", \"y\": 8 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 9 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 10 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n\nThe graph in the dasboard will show the timestamps on the x-axis and the values of the tags on the y-axis."
    },
    {
        "id": "f136b4657060c890",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "Show on UI",
        "info": "",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "4145d978c98c7835",
        "type": "ui_button",
        "z": "61788ebc404c5c85",
        "name": "",
        "group": "11acd9f9f1689c89",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Get Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "e8170bfee59aac90"
            ]
        ]
    },
    {
        "id": "85dc1bc8e81c6bd9",
        "type": "change",
        "z": "61788ebc404c5c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "from",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 140,
        "wires": [
            [
                "51e7ad9851de4df6"
            ]
        ]
    },
    {
        "id": "a6525cbc542e28b6",
        "type": "change",
        "z": "61788ebc404c5c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "to",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "75bd7c64e7c3feaf"
            ]
        ]
    },
    {
        "id": "1bc6a48b12b6c244",
        "type": "inject",
        "z": "61788ebc404c5c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "d5f75bfe832fc4da"
            ]
        ]
    },
    {
        "id": "7971bb88253d7b3c",
        "type": "ui_date_picker",
        "z": "61788ebc404c5c85",
        "name": "",
        "label": "From",
        "group": "da4d1557469f6108",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "from",
        "x": 510,
        "y": 140,
        "wires": [
            [
                "85dc1bc8e81c6bd9"
            ]
        ]
    },
    {
        "id": "0c7ac1d7ee82b8cf",
        "type": "ui_date_picker",
        "z": "61788ebc404c5c85",
        "name": "",
        "label": "to",
        "group": "1295f7e6e9e0c1b6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "to",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "a6525cbc542e28b6"
            ]
        ]
    },
    {
        "id": "d5f75bfe832fc4da",
        "type": "function",
        "z": "61788ebc404c5c85",
        "name": "Default time range",
        "func": "let out1 = {\"payload\": new Date(msg.payload - 1000*60*60*1)};\nlet out2 = {\"payload\": new Date(msg.payload)};\n\nreturn [out1, out2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "7971bb88253d7b3c"
            ],
            [
                "0c7ac1d7ee82b8cf"
            ]
        ]
    },
    {
        "id": "51e7ad9851de4df6",
        "type": "debug",
        "z": "61788ebc404c5c85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "75bd7c64e7c3feaf",
        "type": "debug",
        "z": "61788ebc404c5c85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 180,
        "wires": []
    },
    {
        "id": "4a9053a038a9fe88",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "Select time interval",
        "info": "",
        "x": 110,
        "y": 120,
        "wires": []
    },
    {
        "id": "a98b07cfe6cd9e4b",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "Extract data from Data Service App",
        "info": "",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "ac9c9031c4d34f6d",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "Export CSV file",
        "info": "",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "5a91c9264616446c",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "Variables of interest to be defined in this node",
        "info": "",
        "x": 610,
        "y": 280,
        "wires": []
    },
    {
        "id": "1fc6fb642b364043",
        "type": "csv",
        "z": "61788ebc404c5c85",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 850,
        "y": 540,
        "wires": [
            [
                "196b5cc947cd23b8"
            ]
        ]
    },
    {
        "id": "fdae8cc0a4cef7b6",
        "type": "function",
        "z": "61788ebc404c5c85",
        "name": "CSV data arrangement",
        "func": "let data = {\"timestamp\": []};\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    let variable = Object.values(msg.payload)[i];\n    for (j=0;j<variable.length;j++){\n        let newTs = new Date(variable[j].timestamp).getTime()\n        if(data.timestamp.indexOf(newTs) == -1){\n            data.timestamp.push(newTs);  \n        }\n    }\n}\n\ndata.timestamp.sort((a,b)=>a-b).map((el) => {return new Date(el)});\n\nfor(k=0;k<data.timestamp.length;k++){\n    data.timestamp[k] = new Date(parseInt(data.timestamp[k])).toISOString();\n}\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    data[Object.keys(msg.payload)[i]] = new Array(data.timestamp.length).fill(null);\n    let variable = Object.values(msg.payload)[i];\n    for(j=0;j<variable.length;j++){\n        let index = data.timestamp.indexOf(variable[j].timestamp);\n        if(index > -1){\n            data[Object.keys(msg.payload)[i]][index] = variable[j].value\n        }    \n    }\n}\n\nlet buffer = [];\n// Go through all data elements and organize them as [{a: \"\", b: \"\"}, {a: \"\", b: \"\"},...,{a: \"\", b: \"\"}]\nfor(i=0;i<data.timestamp.length;i++){\n    let newRow = {\"timestamp\": data.timestamp[i]};\n    let columns = Object.keys(msg.payload);\n    for(j=0;j<columns.length;j++){\n        newRow[Object.keys(msg.payload)[j]] = data[Object.keys(msg.payload)[j]][i];\n    }\n    buffer.push(newRow);\n}\n\n// Define CSV columns name\nmsg.columns = Object.keys(data).join(\",\");\nmsg.payload = buffer;\nmsg.topic = env.get(\"variablesName\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 500,
        "wires": [
            [
                "1fc6fb642b364043"
            ]
        ],
        "info": "The aim of this node is to format the data recevied from \"DataService Read Variables\" node, in order to create and save a CSV file with all the datapoints extracted from the Data Service database.\n\nThe CSV file format will be the following:\n\n|timestamp|VarA|VarB|...|VarC|\n|.........|....|....|...|....|\n|.........|....|....|...|....|\n|.........|....|....|...|....|"
    },
    {
        "id": "fe6c2feb47c48960",
        "type": "comment",
        "z": "61788ebc404c5c85",
        "name": "IIH Essentials Application Example",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "196b5cc947cd23b8",
        "type": "file",
        "z": "61788ebc404c5c85",
        "name": "write to file",
        "filename": "/home/nodered/node-red-home/_report/csvdataextract.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 990,
        "y": 540,
        "wires": [
            [
                "f42097b1404b86a5"
            ]
        ],
        "info": "Save a CSV with filename **csvdataextract.csv** containing all the datapoints extracted from Data Service application."
    },
    {
        "id": "f42097b1404b86a5",
        "type": "debug",
        "z": "61788ebc404c5c85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "49d0071dc6326cf9",
        "type": "debug",
        "z": "61788ebc404c5c85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "afa0118b69837475",
        "type": "debug",
        "z": "61788ebc404c5c85",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 440,
        "wires": []
    },
    {
        "id": "11acd9f9f1689c89",
        "type": "ui_group",
        "name": "Default",
        "tab": "209fb7619e4b4b0d",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "da4d1557469f6108",
        "type": "ui_group",
        "name": "From",
        "tab": "209fb7619e4b4b0d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1295f7e6e9e0c1b6",
        "type": "ui_group",
        "name": "To",
        "tab": "209fb7619e4b4b0d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "209fb7619e4b4b0d",
        "type": "ui_tab",
        "name": "DatetimePicker",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]